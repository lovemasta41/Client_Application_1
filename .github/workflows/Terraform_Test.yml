#WORKFLOW TO TEST TERRAFORM GITHUB INTEGRATION FOR INOX

name: Terraform Test Workflow

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  TERRAFORM_VERSION: "1.0.3"
  backend_ResourceGroup: "eops-auto-demo-payg-rg"
  backend_StorageAccount: "eopsautodemotfsa"
  backend_Container: "eops-auto-demo-payg-tfstate"
  backend_State_File: "client_application_1.tfstate"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Job for planning infrastructure.
  terraform-init-validate-plan:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      #- name: Login with Azure
      #  uses: azure/login@v1
      #  with: 
      #    creds: ${{ secrets.AZURE_CREDENTIALS }}
      # Runs a set of commands using the runners shell
      #- name: Run a multi-line script
      #  run: |
      #    echo Add other actions to build,
      #    echo test, and deploy your project.

      - name: Init connection to Terraform_Modules project to use the Terraform modules
        run: |
          git config --global credential.helper store
          echo 'https://lovemasta41:${{ secrets.GLOBAL_PAT }}@github.com' >> ~/.git-credentials
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init
          -backend-config="resource_group_name=${{ env.backend_ResourceGroup }}"
          -backend-config="storage_account_name=${{ env.backend_StorageAccount }}"
          -backend-config="container_name=${{ env.backend_Container }}"
          -backend-config="key=${{ env.backend_State_File }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.CLIENT_TENANT }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.CLIENT_SUBSCRIPTION }}

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan
          -var "vm_admin_password=${{ secrets.VM_PASSWORD }}"
          
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.CLIENT_TENANT }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.CLIENT_SUBSCRIPTION }}
  
  ################# Terraform Apply ###################
  terraform-approve-apply:
    name: Terraform Plan Approval and Apply
    needs: terraform-init-validate-plan
    runs-on: ubuntu-18.04
    environment: 'validate_plan'
    steps:
      - uses: actions/checkout@v3

      - name: Init connection to Terraform_Modules project to use the Terraform modules
        run: |
          git config --global credential.helper store
          echo 'https://lovemasta41:${{ secrets.GLOBAL_PAT }}@github.com' >> ~/.git-credentials

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init
          -backend-config="resource_group_name=${{ env.backend_ResourceGroup }}"
          -backend-config="storage_account_name=${{ env.backend_StorageAccount }}"
          -backend-config="container_name=${{ env.backend_Container }}"
          -backend-config="key=${{ env.backend_State_File }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.CLIENT_TENANT }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.CLIENT_SUBSCRIPTION }}

      - name: Terraform Validate
        id: validate
        run: terraform validate  

      - name: Terraform Apply
        id: Apply
        run: terraform Apply
          -var "vm_admin_password=${{ secrets.VM_PASSWORD }}"
          --auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.CLIENT_TENANT }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.CLIENT_SUBSCRIPTION }}